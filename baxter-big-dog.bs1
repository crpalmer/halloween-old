' {$STAMP BS1}
' {$PBASIC 1.0}

' I/O definitions
SYMBOL  HEAD           = 0
SYMBOL  TAIL           = 1
SYMBOL  PIR            = PIN5
SYMBOL  RX             = 7                     ' SETUP = UP, no ULN
SYMBOL  TX             = 6                     ' SETUP = UP, no ULN

' Constants

SYMBOL BAUD            = OT2400                ' baud jumper out
SYMBOL AUDIO           = %00                   ' both address jumpers out
SYMBOL N_ACTIONS       = 3
SYMBOL ACTION_ENTRY_BYTES = 5

' Variables

SYMBOL x1 = B0                                 ' temporary used throughout
SYMBOL playing = BIT7                          ' bit when temp is the AP-8 status
SYMBOL eeprom_base = B1                        ' address of our current action in data table
SYMBOL R = W1                                  ' random
SYMBOL head_speed = B4                         ' current rate of movement for head
SYMBOL head_to = B5                            ' current destination of the head
SYMBOL tail_speed = B6                         ' current rate of movement for tail
SYMBOL tail_to = B7                            ' current destination of the tail
SYMBOL pirs = B8                               ' used to assure solid reading from the PIR (could be B0?)
SYMBOL reps = B9                               ' number of reps left for the action
SYMBOL head_at = B10                           ' current position of the head
SYMBOL tail_at = B11                           ' current position of the tail

' Reset our state and get ready for the next action

start_waiting:

head_at = 150
tail_at = 150
head_to = head_at
tail_to = tail_at
pirs = 0

PAUSE 5000

waiting:

RANDOM R               ' Keep the random number moving

pirs = pirs + 1 * PIR
IF pirs <= 250 THEN waiting

' Pick a random action and let it go

x1 = R // N_ACTIONS
x1 = 2
eeprom_base = x1 * ACTION_ENTRY_BYTES
x1 = x1 + "0"
SEROUT TX, Baud, ("VPF ", x1, ".mp3", 13)

x1 = eeprom_base + 4
READ x1, reps

playing_loop:

' Head position

IF head_at = head_to THEN new_head
head_at = head_at + head_speed
GOTO handle_tail

' Head is at target, pick a new target in the opposite direction.

new_head:

READ eeprom_base, head_speed
x1 = eeprom_base + 1
READ x1, head_to

RANDOM R
head_to = R // head_to + head_to / 2 + 1 MAX head_to
head_to = head_to * head_speed + 150
IF head_at < 150 THEN head_high
head_speed = - head_speed
head_to = 300 - head_to   ' 150 - (head_to - 150)
head_high:
'DEBUG "HH ", #head_to, " ", #head_speed, " ", #head_at, CR

' Tail position

handle_tail:

IF tail_at = tail_to THEN new_tail
tail_at = tail_at + tail_speed
GOTO send_pulse

' Tail is at target, pick a new target in the opposite direction.

new_tail:

x1 = eeprom_base + 2
READ x1, tail_speed
x1 = x1 + 1
READ x1, tail_to

RANDOM R
tail_to = R // tail_to + tail_to / 2 + 1 MAX tail_to
tail_to = tail_to * tail_speed + 150
IF tail_at < 150 THEN tail_high
tail_speed = - tail_speed
tail_to = 300 - tail_to   ' 150 - (tail_to - 150)
tail_high:
'DEBUG "TT ", #tail_to, " ", #tail_speed, " ", #tail_at, CR

' Send the positions to the servos

send_pulse:

'DEBUG #head_at, " ", #tail_at, CR
PULSOUT HEAD, head_at
PULSOUT TAIL, tail_at
PAUSE 18

reps = reps - 1
IF reps > 0 THEN playing_loop
GOTO start_waiting

' Movement is controlled by the following table.  The head and tail
' I ran out of room so I had to simplify movement somewhat from what I wanted.
' For a given action, the head and tail always move with the same increment (speed)
' each loop.  Random we pick how many steps of that size we take.
'
' That is, speed is the rate at which it moves and speed*steps is the maximum
' movement that can be made.

       ' head-speed   head-steps   tail-speed   tail-steps    100ms ticks
EEPROM (     5,            4,         4,           1,         137 )   'growl ending in a bark
EEPROM (     1,           20,         1,           1,         52  )   'wolf howl
EEPROM (    10,            4,        10,           3,         43 )    'growl
EEPROM (     3,            3,         3,           3,         27 )    '2 barks
EEPROM (     4,            3,        10,           3,         62 )    'attacking for a treat

