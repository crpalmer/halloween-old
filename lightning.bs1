
' =========================================================================
'
'   File...... Haunted_Lunchroom.BS1
'   Purpose...
'   Author.... Shawn Lowe (with lots of Jon Williams' & EFx-Tek's help)
'   E-mail....
'   Started... 15 OCT 07
'   Updated...
'
'   {$STAMP BS1}
'   {$PBASIC 1.0}
'
' =========================================================================


' -----[ Program Description ]---------------------------------------------

' THIS PROGRAM SIMULATES LIGHTING, THEN PLAYS A THUNDER SOUND
' IT ALSO PLAYS SCARY SOUNDS RECORDED ON AN AP8, RANDOMLY,AND WILL
' NOT REPEAT THEM UNTIL THEY HAVE ALL BEEN PLAYED. THIS PROGRAM WAS
' USED FOR A HAUNTED BREAKROOM CONTEST WE HAD AT WORK

' -----[ Revision History ]------------------------------------------------


' -----[ I/O Definitions ]-------------------------------------------------

SYMBOL  Sio             = 7                      ' SETUP = out; no ULN
SYMBOL  PIR             = PIN6                   ' SETUP = DN (or Out)

' -----[ Constants ]-------------------------------------------------------

SYMBOL  Baud            = OT2400                 'Prop-1 speed

SYMBOL  Yes             = 1
SYMBOL  No              = 0

SYMBOL  IsOn            = 1
SYMBOL  IsOff           = 0

SYMBOL  ScanDelay       = 10                     ' 10 ms Scan Delay


' -----[ Variables ]-------------------------------------------------------

SYMBOL  status          = B0                    ' AP-8 status
SYMBOL   playing        = BIT7                  '  presently playing if 1

SYMBOL  relays          = B1
SYMBOL   strike         = BIT8
SYMBOL   K2             = BIT9
SYMBOL   K3             = BIT10
SYMBOL   K4             = BIT11

SYMBOL  sfx             = B2
SYMBOL  last            = B3                     ' last played
SYMBOL  playList        = B4                     ' sounds played
SYMBOL  mask            = B5                     ' bit mask for selection
SYMBOL  check           = B6                     ' for testing play list
SYMBOL  idx             = B7
SYMBOL  delay           = W4
SYMBOL  lottery         = W5                     ' B10 & B11 -- don't use


' -----[ Initialization ]--------------------------------------------------

Reset:
  SEROUT Sio, Baud, ("!!!!!!!AP8", %00, "X", "!RC4", %00, "X")

  PAUSE 30000                                   ' let PIR stabilize
  delay = 0


' -----[ Program Code ]----------------------------------------------------

Main:
  RANDOM lottery
  PAUSE ScanDelay
  delay = delay + ScanDelay * PIR               ' advance/clear timer
  IF delay < 200 THEN Main

Select_Sound:
  RANDOM lottery                                ' re-stir random #
  sfx = lottery // 8                            ' select 0 to 7
  IF sfx = last THEN Select_Sound               ' no repeats
  READ sfx, mask
  check = playlist & mask                       ' bit test selection
  IF check > 0 THEN Select_Sound                ' already played?
    playlist = playlist | mask                  ' no, update play list
    last = sfx                                  ' save idx for next cycle

  IF sfx <> 2 THEN Play_Audio
    GOSUB Flash_Lightning                       ' flash before thunder

Play_Audio:
  GOSUB Start_AP8
  GOSUB Let_AP8_Finish

Check_it:
  IF playList <> %11111111 THEN Reset           ' all played?
    playList = %00000000                        ' reset play list
    GOTO Reset


' -----[ Subroutines ]-----------------------------------------------------

Start_AP8:
  SEROUT Sio, Baud, ("!AP8", %00, "P", sfx)     ' play segment
  RETURN

' -------------------------------------------------------------------------

' Holds program until AP-8 is finished playing current segment

Let_AP8_Finish:
  PAUSE 100
  SEROUT Sio, Baud, ("!AP8", %00, "G")          ' get status
  SERIN  Sio, Baud, status
  IF playing = Yes THEN Let_AP8_Finish
  RETURN

' -------------------------------------------------------------------------

' Toggles RC4 output randomly to simulate lightning

Flash_Lightning:
  FOR idx = 1 TO 3                              ' Flash lightning three times
    strike = IsOn
    GOSUB Set_RC4
    RANDOM lottery
    delay = lottery // 201 + 50                 ' off delay 50 to 250 ms
    PAUSE delay
    strike = IsOff
    GOSUB Set_RC4
    RANDOM lottery
    delay = lottery // 701 + 500                ' on delay 1/3 to 1 sec
    PAUSE delay
  NEXT
  RETURN


' -------------------------------------------------------------------------

Set_RC4:
  SEROUT Sio, Baud, ("!RC4", %00, "S", relays)
  RETURN


' -----[ User Data ]-------------------------------------------------------

Bit_Masks:
  EEPROM (%00000001, %00000010, %00000100, %00001000)
  EEPROM (%00010000, %00100000, %01000000, %10000000)